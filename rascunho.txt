#Checkpoint CloudPrime

**Grupo5**

**67077** Rui Botelho   
**75714** Miguel Pasadinhas   
**76012** Carlos Carvalho


##Gestão do Autoscaling Group

###Grace Period = 3 min

É cerca do dobro do tempo que o sistema leva a ficar operacional. Assim é um tempo razoável, pois não detecta falsos positivos frequentemente. Por outro lado, no pior dos casos uma máquina que esteja de facto a falhar é detectada um pouco mais tarde, o que é raro.

###É adicionada mais uma máquina quando

A utilização do CPU do sistema cresce acima dos 85% durante 120 segundos. Isto acontece pois pode estar eminente um pico de pedidos e é necessário ter tempo para ligar novas instâncias antes da carga máxima ser atingida.

###É removida uma instância quando

A Utilização do CPU desce abaixo dos 70% durante 120 segundos, pois existem recursos subaproveitados que podem ser removidos.

###Health Check

####Timeout = 5 seg
  
É um valor superior ao standard (4seg) sendo mais permissivo, para ter em conta possíveis atrasos na rede.

####Interval = 15 seg
 
Pois é um valor que acreditamos não causar overload nas máquinas e permite uma monitorização de grão suficientemente fino.

####Unhealthy Treshold = 6

Este valor é permissivo o suficiente para permitir congestionamentos graves na rede durante 1m30, o que é possível acontecer, no entanto não nos parece ser demasiado permissivo.

####Healthy Threshold = 3

Acreditamos que se uma máquina responder com sucesso 3 vezes então está saudável.

Este rácio de Tresholds parece-nos adequado para o tipo de serviço, dado que como é computacionalmente intensivo, a frequeência de respostas a pedidos não é tão elevada quanto em serviços web comuns.


##Métricas

É recolhida a contagem total do instruções gastas na factorização de um dado pedido. Desta forma em pedidos subsequentes é possível estimar o seu custo se for um pedido já conhecido.

Para pedidos desconhecidos a decisão será feita com base no tamanho do input, bem como algumas heurísticas a experimentar.

Para além disto pretendemos recolher no load balancer o número de pedidos a serem efectuados em cada máquina, para evitar uma sobrecarga de threads.


##Script

####Compilar o ficheiro *MyICount.java* com Java 4 e com a biblioteca BIT no classpath

java [-cp path/to/BIT] -source 1.4 MyIcount.java



####Compilar os ficheiros *WebServer.java* e *IntFactorization.java* com java 7

java WebServer.java IntFactorization.java



####Instrumentar a class *IntFactorization.class* executando MyICount. Por omissão faz override da class instrumentada, na mesma pasta.

java -XX:-UseSplitVerifier MyIcount [output/folder/path]


####Criar o ficheiro *log.txt* na directoria do servidor

touch log.txt 


####Correr o *WebServer*

java -XX:-UseSplitVerifier WebServer

